local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Forsaken - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local generatorsTab = window:CreateTab("Generators", 4483362458)
local generatorsSection = generatorsTab:CreateSection("Generators")

_G.AutoCompleteGenerators = false

local function getClosestGenerator()
    local player = game.Players.LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end

    local mapFolder = game.Workspace:FindFirstChild("Map")
    if not mapFolder then return nil end

    local ingameFolder = mapFolder:FindFirstChild("Ingame")
    if not ingameFolder then return nil end

    local closest
    local shortestDistance = math.huge

    for _, obj in pairs(ingameFolder:GetChildren()) do
        if obj.Name == "Generator" and obj:IsA("Model") and obj:FindFirstChild("PrimaryPart") then
            local distance = (hrp.Position - obj.PrimaryPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closest = obj
            end
        end
    end

    return closest
end

local function autoCompleteLoop()
    spawn(function()
        local hasWaited = false
        while _G.AutoCompleteGenerators do
            local player = game.Players.LocalPlayer
            local puzzleUI = player:FindFirstChild("PlayerGui"):FindFirstChild("PuzzleUI")

            if puzzleUI then
                if not hasWaited then
                    wait(7)
                    hasWaited = true
                end

                local generator = getClosestGenerator()
                if generator then
                    local remotes = generator:FindFirstChild("Remotes")
                    local remoteEvent = remotes and remotes:FindFirstChild("RE")
                    if remoteEvent then
                        remoteEvent:FireServer()
                    end
                end
            else
                hasWaited = false
            end

            wait(7)
        end
    end)
end

generatorsTab:CreateToggle({
    Name = "Auto Complete Generators",
    CurrentValue = false,
    SectionParent = generatorsSection,
    Callback = function(state)
        _G.AutoCompleteGenerators = state
        if state then
            Rayfield:Notify({
                Title = "Success!",
                Content = "Auto Complete Generators Enabled!",
                Duration = 5
            })
            autoCompleteLoop()
        else
            Rayfield:Notify({
                Title = "Success!",
                Content = "Auto Complete Generators Disabled!",
                Duration = 5
            })
        end
    end
})
