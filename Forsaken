local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local window = Rayfield:CreateWindow({
    Name = "Forsaken - Alpha Hax",
    LoadingTitle = "Loading Assets..",
    LoadingSubtitle = "Created By Luxx",
    ConfigurationSaving = {
        Enabled = false,
        FileName = "Sirius"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Luxx's Key System",
        Subtitle = "Enter Your Key",
        Note = "Rate The Features",
        FileName = "Sirius",
        SaveKey = false,
        Key = "2025"
    }
})

local generatorsTab = window:CreateTab("Generators")
local generatorsSection = generatorsTab:CreateSection("Generators")

_G.AutoGeneratorsEnabled = false
local generatorInterval = 7

local function findNearestGenerator()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return nil end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return nil end

    local generatorFolder = workspace:WaitForChild("Map"):WaitForChild("Ingame"):WaitForChild("Map")
    local nearest, minDistance = nil, math.huge

    for _, obj in pairs(generatorFolder:GetChildren()) do
        if obj.Name == "Generator" and obj:FindFirstChild("Remotes") then
            local distance = (rootPart.Position - obj:GetPivot().Position).Magnitude
            if distance < minDistance then
                minDistance = distance
                nearest = obj
            end
        end
    end

    return nearest
end

local function startGeneratorAutoComplete()
    spawn(function()
        while _G.AutoGeneratorsEnabled do
            local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
            local puzzleUI = playerGui:FindFirstChild("PuzzleUI")

            if puzzleUI then
                local generator = findNearestGenerator()
                if generator then
                    local remotes = generator:FindFirstChild("Remotes")
                    local remoteEvent = remotes and remotes:FindFirstChild("RE")
                    if remoteEvent then
                        remoteEvent:FireServer()
                    end
                end
            end

            wait(generatorInterval)
        end
    end)
end

generatorsTab:CreateToggle({
    Name = "Auto Complete Generators",
    CurrentValue = false,
    SectionParent = generatorsSection,
    Callback = function(state)
        _G.AutoGeneratorsEnabled = state

        Rayfield:Notify({
            Title = "Generators",
            Content = state and "Auto Generators Enabled" or "Auto Generators Disabled",
            Duration = 3,
            Image = 4483362458
        })

        if state then
            startGeneratorAutoComplete()
        end
    end
})
